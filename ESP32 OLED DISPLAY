#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <U8g2lib.h>
#include <Fonts/FreeSerifBold9pt7b.h>

#define TFT_CS 21  // Chip select pin (usually not used for ST7735)
#define TFT_RST 1  // Reset pin
#define TFT_DC 20  // Data/Command pin
#define TFT_MOSI 5
#define TFT_SCLK 8

const int buttonPin = 3;  // Digital pin connected to button
int buttonState = HIGH;
int lastButtonState = HIGH;
unsigned long lastPressTime = 0;
const unsigned long debounceDelay = 100;
const int potPin = 4;  // Pin connected to the potentiometer

int value = 0;
int mappedValue = 0;
int lastMappedValue = -1;  // Track last displayed mappedValue
const int minPotValue = 500;
const int maxPotValue = 4095;
int inc=20;
bool buttonpressed = false;

U8G2_SSD1306_72X40_ER_F_SW_I2C u8g2(U8G2_R0, /* clock=*/6, /* data=*/5, /* reset=*/U8X8_PIN_NONE);
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

void Startup();
void knob();
void button();
void drawmenu();
void calcengine();

void setup() {
  Serial.begin(9600);
  u8g2.begin();
  tft.initR(INITR_BLACKTAB);
  tft.setFont(&FreeSerifBold9pt7b); // Set the font style
  tft.setRotation(3);
  tft.fillScreen(ST7735_WHITE);
  tft.setTextColor(ST7735_BLACK, ST7735_WHITE);
  tft.setTextSize(1);
  pinMode(buttonPin, INPUT_PULLUP);
  Startup();
  tft.setFont();
  tft.setTextSize(1);
  while(true){
    knob();
    button();
  }
}

void loop(){}

void knob() {
  int potValue = analogRead(potPin);  // Read the potentiometer value (0-4095)
  if (potValue < minPotValue) {
    mappedValue = 0;
  } else {
    mappedValue = map(potValue, minPotValue, maxPotValue, 10, 360);
  }
  if (mappedValue != lastMappedValue) {
    Serial.print("Potentiometer Value: ");
    Serial.print(potValue);
    Serial.print(" -> Mapped Value: ");
    Serial.println(mappedValue);
    drawmenu();
    lastMappedValue = mappedValue;
  }
}

void button() {
  int reading = digitalRead(buttonPin);
  if (reading == LOW && lastButtonState == HIGH && (millis() - lastPressTime) > debounceDelay) {
    Serial.println("Button Pressed");
    lastPressTime = millis();
    value = (value + 1) % 2;
    buttonpressed = true;
  } else {
    buttonpressed = false;
  }
  lastButtonState = reading;
}

void drawmenu() {
  tft.drawRect(38,100, 130, 15, ST7735_WHITE);
  if (mappedValue > 180) {//return button highlighted
    tft.setTextColor(ST7735_BLACK, ST7735_WHITE); 
    tft.setCursor(40, 100);
    tft.print("Enter");
    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);  
    tft.setCursor(90, 100);
    tft.print("Return");
  
  } else if (mappedValue <=180) {//enter button highlighted
    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);  
    tft.setCursor(40, 100);
    tft.print("Enter");
    tft.setTextColor(ST7735_BLACK, ST7735_WHITE);  
    tft.setCursor(90, 100);
    tft.print("Return");
    if(digitalRead(buttonPin)== LOW){
      calcengine();
    }
  }
}

void Startup() {
    // Run until button is pressed to exit
    while (digitalRead(buttonPin) == HIGH) {
    // Clear only the area behind "Finmor" text
    tft.drawRect(25, 40, 120, 35, ST7735_WHITE);  // Adjust width and height as needed
    tft.setFont(&FreeSerifBold9pt7b);
    tft.setTextSize(2);
    tft.setTextColor(tft.color565(200, 0, 0), ST7735_WHITE);
    tft.setCursor(25, 70);
    tft.print("Finmor");
    // Clear only the area behind "Continue" text
    tft.drawRect(60, 100, 60, 10, ST7735_WHITE);  // Adjust width and height as needed
    tft.setFont();
    tft.setTextSize(1);
    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
    tft.setCursor(60, 100);
    tft.print("Continue");
    delay(900);  // Adjust delay to control screen refresh rate
    tft.fillRect(60, 100, 60, 10, ST7735_WHITE);
  }
  tft.fillScreen(ST7735_WHITE);
  Serial.println("Startup complete, exiting loop.");
}


void calcengine() {
  tft.drawRect(0, inc, 160, 1, ST7735_BLACK);  // Use `inc` here
  bool newt = false;

  if(newt) {
    // Your code logic if `newt` is true
  }
}

void demofunction() {
  inc = 2 * inc;  // Modify `inc`
  tft.drawRect(0, inc, 160, 1, ST7735_BLACK);  // Use updated `inc`
}
