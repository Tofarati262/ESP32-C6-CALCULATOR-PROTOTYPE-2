#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <U8g2lib.h>

#define TFT_CS 21  // Chip select pin (usually not used for ST7735)
#define TFT_RST 1  // Reset pin
#define TFT_DC 20  // Data/Command pin
#define TFT_MOSI 5
#define TFT_SCLK 8

const int buttonPin = 3;  // Digital pin connected to button
int buttonState = HIGH;
int lastButtonState = HIGH;
unsigned long lastPressTime = 0;
const unsigned long debounceDelay = 100;
const int potPin = 4;  // Pin connected to the potentiometer

int value = 0;
int mappedValue = 0;
int lastMappedValue = -1;     // Track last displayed mappedValue
float smoothedPotValue = -1;  // Store the smoothed potentiometer value
const int minPotValue = 302;
const int maxPotValue = 4095;
bool buttonpressed = false;


U8G2_SSD1306_72X40_ER_F_SW_I2C u8g2(U8G2_R0, /* clock=*/6, /* data=*/5, /* reset=*/U8X8_PIN_NONE);
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

void setup() {
  Serial.begin(9600);
  u8g2.begin();
  tft.initR(INITR_BLACKTAB);
  tft.setRotation(3);
  tft.fillScreen(ST7735_WHITE);
  tft.setTextColor(ST7735_BLACK, ST7735_WHITE);
  tft.setTextSize(1);
  pinMode(buttonPin, INPUT_PULLUP);

  smoothedPotValue = analogRead(potPin);  // Initial potentiometer value for smoothing
}

void loop() {
  knob();
  button();
}

void knob() {
  int potValue = analogRead(potPin);  // Read the potentiometer value (0-4095)

  // Apply Exponential Moving Average (EMA) smoothing
 mappedValue = map(potValue, minPotValue, maxPotValue, 0, 360); 

  // Map the smoothed potentiometer value to a range of 0 to 360
  // Only update display if mappedValue has changed significantly
  if (mappedValue != lastMappedValue) {
    Serial.print("Smoothed Potentiometer Value: ");
    Serial.print(smoothedPotValue);
    Serial.print(" -> Mapped Value: ");
    Serial.println(mappedValue);

    drawmenu();                     // Call drawmenu only when there's a significant change
    lastMappedValue = mappedValue;  // Update last displayed value
  }
}

void button() {
  int reading = digitalRead(buttonPin);

  if (reading == LOW && lastButtonState == HIGH && (millis() - lastPressTime) > debounceDelay) {
    Serial.println("Button Pressed");
    lastPressTime = millis();
    value = (value + 1) % 2;
    buttonpressed = true;  // Set flag when button is pressed
    drawmenu();            // Call drawmenu when button is pressed
  } else {
    buttonpressed = false;
  }

  lastButtonState = reading;
}

void drawmenu() {
  tft.fillScreen(ST7735_WHITE);

  if (mappedValue == 360) {
    tft.setTextColor(ST7735_BLACK, ST7735_WHITE);  // Black text on white background
    tft.setCursor(50, 100);
    tft.print("Enter");

    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);  // White text on black background
    tft.setCursor(100, 100);
    tft.print("Return");

    if (buttonpressed == true) {
      drawfirstmenu();
    }
  } else if (mappedValue < 180) {
    tft.setTextColor(ST7735_WHITE, ST7735_BLACK);  // White text on black background
    tft.setCursor(50, 100);
    tft.print("Enter");

    tft.setTextColor(ST7735_BLACK, ST7735_WHITE);  // Black text on white background
    tft.setCursor(100, 100);
    tft.print("Return");

    if (buttonpressed == true) {
      drawthirdmenu();
    }
  }
}

// Define drawfirstmenu and drawthirdmenu if they perform specific tasks
void drawfirstmenu() {
  tft.fillScreen(ST7735_BLACK);
}

void drawthirdmenu() {
  tft.fillScreen(ST7735_RED);
}
